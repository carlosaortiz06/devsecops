name: CI/CD - Backend

on:
  push:
    paths:
      - 'prueba-backend/**'
      - 'backend-ci.yml'
  pull_request:
    paths:
      - 'prueba-backend/**'

jobs:
  build-test-analyze:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Build and test
        working-directory: prueba-backend
        run: mvn clean verify

      - name: Install Git Secrets
        run: |
            sudo apt-get update
            sudo apt-get install git-secrets


      - name: Scan for secrets
        run: |
            git secrets --scan


      - name: Run SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: prueba-backend
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.50.1/trivy_0.50.1_Linux-64bit.tar.gz
          tar zxvf trivy_0.50.1_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Scan dependencies with Trivy
        run: trivy fs --scanners vuln --format json --severity HIGH,CRITICAL --output trivy_report.json .

      - name: List files after Trivy scan
        run: ls -la

      - name: Upload Trivy JSON report as artifact
        uses: actions/upload-artifact@v4
        with:
            name: trivy-json-report
            path: trivy_report.json


      - name: Build Docker Image
        run: docker build -t backend:latest prueba-backend

      - name: Scan Docker Image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: backend:latest


      # Paso 14: Configuraci√≥n de credenciales de AWS para interactuar con ECS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      # Paso 2: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Paso 3: Tag Docker image for ECR
      - name: Tag Docker image for ECR
        run: |
          echo "Tagging Docker image..."
          docker tag backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest

      # Paso 4: Push Docker image to Amazon ECR
      - name: Push Docker image to ECR
        run: |
          echo "Pushing Docker image to ECR..."
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/backend:latest        